<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Four Bits Per Nybble]]></title>
  <link href="http://chris.elledge.org/atom.xml" rel="self"/>
  <link href="http://chris.elledge.org/"/>
  <updated>2013-09-05T22:41:22-04:00</updated>
  <id>http://chris.elledge.org/</id>
  <author>
    <name><![CDATA[Chris Elledge]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Micro-Controller Architecture 101]]></title>
    <link href="http://chris.elledge.org/blog/2013/09/05/micro-controller-architecture-101/"/>
    <updated>2013-09-05T21:35:00-04:00</updated>
    <id>http://chris.elledge.org/blog/2013/09/05/micro-controller-architecture-101</id>
    <content type="html"><![CDATA[<p>Modern micro-controllers are basically Systems on a Chip (SOC) with
memory integrated into the package as well. The lack of external
memory buses allows for smaller packages and pin counts. It also
greatly simplifies the use of these parts.</p>

<p>Many smaller micros (PIC16, PIC24, AVR) are setup in what is known as
the Harvard Architecture. This means that the executable memory and
data memory are completely separated. Instructions cannot be executed
from the data memory, and the different memory sections can be
addressed in completely different ways.</p>

<p>Usually the executable memory is on Flash or ROM (rarely now
days). While the processor is able to directly fetch instructions from
Flash, there is typically no way to directly read variables from
it. Usually special retrieval instructions or address remapping are
needed. Some compilers will automatically use the constructs for any
constant variable reads.</p>

<p>Furthermore, Flash and RAM don&rsquo;t even need to have the same line
size. The PIC16F series has 14 bit instruction lines and 8 bit data
lines. The PIC24F series has 24 bit instruction lines and 16 bit data
lines. The AVR has 16 bit instruction lines and 8 bit data lines. The
odd flash word sizes can often make constant storage complicated. The
compilers for the two PICs usually store constants in just the bottom
8 or 16 bits of a line thus wasting big chunks of Flash if you use
lots of constants. If you want to make full use of the storage, you
must use the Flash peripheral registers instead of the simpler address
remapping that the compiler uses. While the alignments are much
cleaner on the AVR, all Flash data reads have to be done with a
special load instruction. So it falls in between the two PIC methods in
complexity.</p>

<p>Details on these operations are a topic for a future post. Next time I will cover Peripheral Registers, Flash Pages, and Memory Banks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Treatise on Firmare Development]]></title>
    <link href="http://chris.elledge.org/blog/2013/09/04/a-treatise-on-firmare-development/"/>
    <updated>2013-09-04T21:29:00-04:00</updated>
    <id>http://chris.elledge.org/blog/2013/09/04/a-treatise-on-firmare-development</id>
    <content type="html"><![CDATA[<p>I plan to write several articles on the core concepts of firmware
development and move into more advanced topics. For the simple
concepts I will probably be mostly referring to AVR processors due to
Atmel&rsquo;s freely available toolchain and their common use in Arduino
designs. As I move into the more advanced concepts I will probably
move on to other processors including various ARM processors.</p>

<h3>Planned Core Concepts</h3>

<ul>
<li>Micro-controller Architectures</li>
<li>Assembly and C Compilers</li>
<li>Registers</li>
<li>Common Peripherals</li>
<li>Interrupts</li>
</ul>


<h3>Planned Advanced Topics</h3>

<ul>
<li>Direct Memory Access</li>
<li>Asynchronous Programming</li>
<li>Real Time Operating Systems</li>
<li>Power Management</li>
<li>Fixed Point Math</li>
</ul>


<p>There are plenty of other resources for getting started with
micro-controller programming for all kinds of chips, so I plan to skip
any kind of introduction to coding in C and examples on getting
started with a particular micro-controller. Instead I will mainly be
going into the theory of operation on these topics in the hope that
with that knowledge it will be easier to take the examples available
in the wild and tame them to your needs. The intended audience is
expected to have a software engineering background.</p>
]]></content>
  </entry>
  
</feed>

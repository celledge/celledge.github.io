---
layout: post
title: "Usefully Random"
date: 2014-02-20 21:17
comments: true
categories: Firmware
---

Some microcontroller projects require the generation of random
numbers. The first thought is to simply use the random() call provided
by the compiler libraries. That function provides psuedorandom
numbers which will probably seem random enough at first pass.

Unfortunately, you may realize that after some usage, the random
numbers generated by this function always gives the same sequence of
results. This is caused by the microcontroller always using the same
seed for the generator. If you want the numbers to no longer be
completely deterministic, you will need to provide a seed to the
random number library. This is typically done with
srandom(uint32_t). By providing a seed, you can initialize the random
library with a different state.

The question becomes, "what can you use as a seed?" If all your
devices have unique serial numbers, those could be used. Then at least
each of your devices should have a different sequence of random
numbers. Unfortunately, those sequences would still be the same on
each reboot for a single devices. Below I will present a method for
getting enough entropyon an Atmel AVR to seed the generator for what I
call "usefully random."

The Atmel AVR Mega series has several different oscilators which are
not phase locked. This means that you can use the interference between
these oscilators to provide some variability. The easiest way to do
this is to setup an interrupt off of one oscillator and count the
ticks of another oscillator. For example you can setup a Timer/Counter
to run from the main high speed oscillator, and have the Watchdog
Timer running from the 128kHz oscillator trigger an interrupt. From
the interrupt the counter can be queried. There is quite a bit of
jitter between the oscillators which means that the lowest few bits in
the counter can be used for entropy. Just do this a few times and
rotate in the bits to a 32 bit value. Then that value can be used as the
seed.

An additional source of entropy can be obtained by sampling a floating
analog pin repeatedly. The bottom couple of bits can be used as noise
measurement. By mixing both approaches, it is pretty easy to have
enough entropy to seed the generator in less than 100ms after booting,
allowing for use of the ADC and Timer/Counter for other application
purposes.
